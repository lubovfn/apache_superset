sudo apt update -y & sudo apt upgrade -y
sudo apt install redis-server
sudo apt-get install build-essential libssl-dev libffi-dev python3.10-dev python3.10-pip libsasl2-dev libldap2-dev default-libmysqlclient-dev python3.10-venv libpq-dev 
solutions https://askubuntu.com/questions/1475895/install-python3-10-on-ubuntu-23-04
sudo add-apt-repository ppa:savoury1/python
sudo apt update

Create app directory for superset and dependencies
sudo mkdir /app
sudo chown user /app
cd /app

Create python environment
mkdir superset
cd superset
python3 -m venv superset_env
. superset_env/bin/activate
pip install --upgrade setuptools pip

Install python dependencies
pip install pillow
pip install apache-superset
pip install psycopg2
pip install gunicorn
pip install celery
pip install gevent

Create superset config file
touch superset_config.py
export SUPERSET_CONFIG_PATH=/app/superset/superset_config.py

Edit superset_config.py using nano superset_config.py and put following code in it
# Superset specific config
ROW_LIMIT = 5000

# Flask App Builder configuration
# Your App secret key will be used for securely signing the session cookie
# and encrypting sensitive information on the database
# Make sure you are changing this key for your deployment with a strong key.
# Alternatively you can set it with `SUPERSET_SECRET_KEY` environment variable.
# You MUST set this for production environments or the server will not refuse
# to start and you will see an error in the logs accordingly.
SECRET_KEY = 'YOUR_OWN_RANDOM_GENERATED_SECRET_KEY'

# The SQLAlchemy connection string to your database backend
# This connection defines the path to the database that stores your
# superset metadata (slices, connections, tables, dashboards, ...).
# Note that the connection information to connect to the datasources
# you want to explore are managed directly in the web UI
# The check_same_thread=false property ensures the sqlite client does not attempt
# to enforce single-threaded access, which may be problematic in some edge cases
SQLALCHEMY_DATABASE_URI = 'sqlite:////app/superset/superset.db?check_same_thread=false'

TALISMAN_ENABLED = False
WTF_CSRF_ENABLED = False

# Set this API key to enable Mapbox visualizations
MAPBOX_API_KEY = ''


# Celery Redis configuration for async query execution
class CeleryConfig(object):
broker_url = "redis://localhost:6220/0"
imports = (
    "superset.sql_lab",
    "superset.tasks.scheduler",
)
result_backend = "redis://localhost:6220/0"
worker_prefetch_multiplier = 10
task_acks_late = True
task_annotations = {
    "sql_lab.get_sql_results": {
        "rate_limit": "100/s",
    },
}

CELERY_CONFIG = CeleryConfig

# On Redis
from flask_caching.backends.rediscache import RedisCache
RESULTS_BACKEND = RedisCache(
    host='localhost', port=6220, key_prefix='superset_results')

    Please replace YOUR_OWN_RANDOM_GENERATED_SECRET_KEY
    openssl rand -base64 42

   # Create an admin user in your metadata database (use `admin` as username to be able to load the examples)
export FLASK_APP=superset

superset db upgrade

superset fab create-admin

# As this is going to be production I have commented load example part but if you need you can run this
# superset load_examples

# Create default roles and permissions
superset init

create create script using following command
 nano run_superset.sh
#!/bin/bash
export SUPERSET_CONFIG_PATH=/app/superset/superset_config.py
. /app/superset/superset_env/bin/activate
gunicorn \
    -w 10 \
    -k gevent \
    --timeout 120 \
    -b  0.0.0.0:8788 \
    --limit-request-line 0 \
    --limit-request-field_size 0 \
    --statsd-host localhost:8532 \
    "superset.app:create_app()"

chmod +x run_superset.sh

sh run_superset.sh

sudo nano /etc/systemd/system/superset.service

[Unit]
Description = Apache Superset Webserver Daemon
After = network.target

[Service]
PIDFile = /app/superset/superset-webserver.PIDFile
Environment=SUPERSET_HOME=/app/superset
Environment=PYTHONPATH=/app/superset
WorkingDirectory = /app/superset
limit-re>
ExecStart = /app/superset/run_superset.sh
ExecStop = /bin/kill -s TERM $MAINPID


[Install]
WantedBy=multi-user.target



once copied run following command to enable and start service

systemctl daemon-reload
sudo systemctl enable superset.service
sudo systemctl start superset.service

To run celery I have created a sh script that you can run in order to run the server.
nano run_celery.sh

#!/bin/bash export SUPERSET_CONFIG_PATH=/app/superset/superset_config.py . /app/superset/superset_env/bin/activate

celery --app=superset.tasks.celery_app:app worker --pool=prefork -O fair -c 8 & celery --app=superset.tasks.celery_app:app beat

In above script -c 8 represents how many worker processes should run in a worker.


chmod +x run_celery.sh

sh run_celery.sh

sudo nano /etc/systemd/system/celery.service
[Unit]
Description = Apache Celery worker Daemon
After = network.target

[Service]
PIDFile = /app/superset/celery.PIDFile
Environment=SUPERSET_HOME=/app/superset
Environment=PYTHONPATH=/app/superset
WorkingDirectory = /app/superset
ExecStart = /app/superset/run_celery.sh
ExecStop = /bin/kill -s TERM $MAINPID


[Install]
WantedBy=multi-user.target


to enable and start service
systemctl daemon-reload
sudo systemctl enable celery.service
sudo systemctl start celery.service
